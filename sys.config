%% -*- emacs -*-
%% openai api client configuartion

[
 {rester,
  [{ssl_options, [
  		  %% {verify,verify_none}
		  {cacertfile, "/tmp/cacert.pem"}
		 ]}]
 },

{openai,
  [
   {baseurl, "https://api.openai.com"},
   {user,    "user"},
   %% apikey  undefined | ".authinfo" | "sk-...."
   {apikey,  "$OPENAI_API_KEY"},
   {model,   "gpt-3.5-turbo"}
  ]},

 {kernel,
  [
   %% {log_root, "/var/erlang/openai/log"}, %% on target
   {logger_level, info}, %% debug},
   {logger,
    [
     {handler, default, undefined}, %% removed default handler
     {handler, default, logger_disk_log_h,
      #{ level => all,
	 config => #{ file => "logs/console.log",
		      type => wrap,
		      max_no_files => 4,
		      max_no_bytes => 1000000
		    } 
       }},
     {handler, error, logger_disk_log_h,
      #{ level => error,
	 config => #{ file => "logs/error.log",
		      type => wrap,
		      max_no_files => 4,
		      max_no_bytes => 1000000
		    }
       }},
     {handler, debug_tty, logger_std_h,
      #{ level => debug,
	 filter_default => stop,
	 filters => [{debug_only,
		      {fun logger_filters:level/2, 
		       {log, eq, debug}}}],
	 config => #{ type => standard_io } %% standard_io | standard_error 
       }},
     {handler, debug, logger_disk_log_h,
      #{ level => debug,
	 filter_default => stop,
	 filters => [{debug_only,
		      {fun logger_filters:level/2, 
		       {log, eq, debug}}}],
	 config => #{ file => "logs/debug.log",
		      type => wrap,
		      max_no_files => 4,
		      max_no_bytes => 1000000
		    }}
     }

    ]}
   ]}
].

   
  
